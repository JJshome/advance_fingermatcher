name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PYTHONUNBUFFERED: 1
  PYTHONDONTWRITEBYTECODE: 1

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: [3.8, 3.9, '3.10', 3.11]

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          libgl1-mesa-glx \
          libglib2.0-0 \
          libsm6 \
          libxext6 \
          libxrender-dev \
          libgomp1 \
          libfontconfig1-dev \
          libfreetype6-dev
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip setuptools wheel
        pip install -r requirements.txt
        pip install pytest>=7.0.0 pytest-cov>=4.0.0 pytest-asyncio pytest-timeout
    
    - name: Install package
      run: |
        pip install -e .
    
    - name: Create test data directory
      run: |
        mkdir -p tests/data
        # Create dummy test files if they don't exist
        echo "dummy" > tests/data/sample1.png
        echo "dummy" > tests/data/sample2.png
    
    - name: Verify installation
      run: |
        python -c "import advance_fingermatcher; print(f'Package version: {advance_fingermatcher.__version__}')"
        python -c "import advance_fingermatcher; advance_fingermatcher.print_system_info()"
    
    - name: Test CLI commands
      run: |
        fingermatcher --help
        fingermatcher version
        fingermatcher demo --help
        timeout 30s fingermatcher demo || echo "Demo completed or timed out safely"
    
    - name: Run tests
      run: |
        # Run existing tests if available
        if [ -f "tests/test_basic.py" ]; then
          pytest tests/test_basic.py -v --timeout=60
        else
          echo "Creating basic tests..."
          cat > tests/test_basic.py << 'EOF'
        import pytest
        import subprocess
        import sys
        
        def test_import():
            """Test that the package can be imported."""
            import advance_fingermatcher
            assert hasattr(advance_fingermatcher, '__version__')
            assert advance_fingermatcher.__version__ == "1.0.1"
        
        def test_package_info():
            """Test package metadata."""
            import advance_fingermatcher
            info = advance_fingermatcher.get_package_info()
            assert info['name'] == 'advance_fingermatcher'
            assert 'version' in info
        
        def test_cli_help():
            """Test CLI help command."""
            result = subprocess.run([sys.executable, '-m', 'advance_fingermatcher.cli', '--help'], 
                                  capture_output=True, text=True, timeout=30)
            assert result.returncode == 0
            assert 'Advanced Fingerprint Matcher CLI' in result.stdout
        
        def test_cli_version():
            """Test CLI version command."""
            result = subprocess.run(['fingermatcher', 'version'], 
                                  capture_output=True, text=True, timeout=30)
            assert result.returncode == 0
            assert '1.0.1' in result.stdout
        
        def test_demo_command():
            """Test demo command."""
            result = subprocess.run(['fingermatcher', 'demo'], 
                                  capture_output=True, text=True, timeout=30)
            assert result.returncode == 0
            assert 'Advanced Fingerprint Matcher Demo' in result.stdout
        
        def test_dependency_check():
            """Test dependency checking."""
            import advance_fingermatcher
            deps = advance_fingermatcher.check_dependencies()
            assert 'missing_core' in deps
            assert 'all_core_available' in deps
        EOF
          pytest tests/test_basic.py -v --timeout=60
        fi
    
    - name: Test imports and basic functionality
      run: |
        python -c "
        import advance_fingermatcher as afm
        print('Testing core functionality...')
        
        # Test version
        print(f'Version: {afm.get_version()}')
        
        # Test dependency check
        deps = afm.check_dependencies()
        print(f'Core deps available: {deps[\"all_core_available\"]}')
        
        # Test package info
        info = afm.get_package_info()
        print(f'Package: {info[\"name\"]} v{info[\"version\"]}')
        
        print('All basic tests passed!')
        "
    
    - name: Generate coverage report
      if: matrix.python-version == '3.9'
      run: |
        pip install coverage
        coverage run --source=advance_fingermatcher -m pytest tests/ || true
        coverage xml || true
    
    - name: Upload coverage to Codecov
      if: matrix.python-version == '3.9'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: false
        verbose: true

  lint:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.9
        cache: 'pip'
    
    - name: Install linting dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8>=6.0.0 black>=23.0.0 isort>=5.12.0
    
    - name: Check code formatting with black
      run: |
        black --check --diff advance_fingermatcher/ tests/ || {
          echo "Code formatting issues found. Run 'black advance_fingermatcher/ tests/' to fix."
          exit 0  # Don't fail the build for formatting issues
        }
    
    - name: Check import sorting with isort
      run: |
        isort --check-only --diff advance_fingermatcher/ tests/ || {
          echo "Import sorting issues found. Run 'isort advance_fingermatcher/ tests/' to fix."
          exit 0  # Don't fail the build for import sorting
        }
    
    - name: Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 advance_fingermatcher --count --select=E9,F63,F7,F82 --show-source --statistics \
          --exclude=__pycache__,*.pyc,.git,build,dist,.tox,.eggs,*.egg-info
        
        # Check for other issues but don't fail the build
        flake8 advance_fingermatcher --count --exit-zero --max-complexity=15 --max-line-length=127 \
          --statistics --exclude=__pycache__,*.pyc,.git,build,dist,.tox,.eggs,*.egg-info \
          --extend-ignore=E203,W503,W504

  security:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.9
        cache: 'pip'
    
    - name: Install security scanning tools
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit[toml]
    
    - name: Check for known security vulnerabilities
      run: |
        safety check --file requirements.txt || {
          echo "Security vulnerabilities found in dependencies"
          exit 0  # Don't fail build but report
        }
    
    - name: Run bandit security linter
      run: |
        bandit -r advance_fingermatcher/ -f json -o bandit-report.json || {
          echo "Security issues found by bandit"
          cat bandit-report.json || true
          exit 0  # Don't fail build but report
        }

  docker:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker image
      run: |
        docker build -t advance_fingermatcher:test .
    
    - name: Test Docker image basic functionality
      run: |
        # Test basic container startup
        echo "Testing container startup..."
        docker run --rm --name test-container advance_fingermatcher:test &
        CONTAINER_PID=$!
        sleep 5
        kill $CONTAINER_PID 2>/dev/null || true
        
        # Test CLI commands in container
        echo "Testing CLI commands..."
        docker run --rm advance_fingermatcher:test fingermatcher --help
        docker run --rm advance_fingermatcher:test fingermatcher version
        
        # Test demo command with timeout
        echo "Testing demo command..."
        timeout 30s docker run --rm advance_fingermatcher:test fingermatcher demo || {
          echo "Demo completed or timed out safely"
        }
    
    - name: Test Docker image health
      run: |
        # Start container in background
        docker run -d --name health-test advance_fingermatcher:test tail -f /dev/null
        
        # Wait for container to be ready
        sleep 5
        
        # Run health check script
        docker exec health-test /app/healthcheck.sh
        
        # Cleanup
        docker stop health-test
        docker rm health-test

  performance:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.9
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -e .
        pip install memory-profiler psutil
    
    - name: Run performance tests
      run: |
        python -c "
        import time
        import psutil
        import advance_fingermatcher as afm
        
        print('Performance Test Results:')
        print('=' * 40)
        
        # Memory usage test
        process = psutil.Process()
        memory_before = process.memory_info().rss / 1024 / 1024  # MB
        
        # Import and initialization time
        start_time = time.time()
        afm.check_dependencies()
        init_time = time.time() - start_time
        
        memory_after = process.memory_info().rss / 1024 / 1024  # MB
        
        print(f'Initialization time: {init_time:.3f}s')
        print(f'Memory usage: {memory_after:.1f}MB')
        print(f'Memory overhead: {memory_after - memory_before:.1f}MB')
        print('Performance test completed successfully!')
        "

  notification:
    runs-on: ubuntu-latest
    needs: [test, lint, security, docker]
    if: always()
    
    steps:
    - name: Notify success
      if: needs.test.result == 'success' && needs.lint.result == 'success' && needs.docker.result == 'success'
      run: |
        echo "🎉 All CI checks passed successfully!"
        echo "✅ Tests: ${{ needs.test.result }}"
        echo "✅ Lint: ${{ needs.lint.result }}"
        echo "✅ Security: ${{ needs.security.result }}"
        echo "✅ Docker: ${{ needs.docker.result }}"
    
    - name: Notify failure
      if: needs.test.result == 'failure' || needs.lint.result == 'failure' || needs.docker.result == 'failure'
      run: |
        echo "❌ CI checks failed!"
        echo "Tests: ${{ needs.test.result }}"
        echo "Lint: ${{ needs.lint.result }}"
        echo "Security: ${{ needs.security.result }}"
        echo "Docker: ${{ needs.docker.result }}"
        exit 1
